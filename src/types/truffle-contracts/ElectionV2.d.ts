/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ElectionV2Contract
  extends Truffle.Contract<ElectionV2Instance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ElectionV2Instance>;
}

type AllEvents = never;

export interface ElectionV2Instance extends Truffle.ContractInstance {
  contractVoteCounts(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  contractVotes(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, string, string, string, string, string, BN, BN, boolean]>;

  myOrganizedVotes(
    arg0: string,
    arg1: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  addVote: {
    (
      _name: string,
      _organizerName: string,
      _publicKey: string,
      _options: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _organizerName: string,
      _publicKey: string,
      _options: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _organizerName: string,
      _publicKey: string,
      _options: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _organizerName: string,
      _publicKey: string,
      _options: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getMyOrganizedVotes(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  getVoteOptionsByVoteID(
    voteID: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ id: BN; name: string }[]>;

  getVoteTicketsByVoteID(
    voteID: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ id: BN; encryptedBallot: string; signature: string }[]>;

  getVoteResultsByVoteID(
    voteID: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN[]>;

  caseVoteByVoteID: {
    (
      voteID: number | BN | string,
      _encryptedBallot: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      voteID: number | BN | string,
      _encryptedBallot: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      voteID: number | BN | string,
      _encryptedBallot: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      voteID: number | BN | string,
      _encryptedBallot: string,
      _signature: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  endVoteByVoteID: {
    (
      voteID: number | BN | string,
      _privateKey: string,
      voteOptionSuccessTicketCounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      voteID: number | BN | string,
      _privateKey: string,
      voteOptionSuccessTicketCounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      voteID: number | BN | string,
      _privateKey: string,
      voteOptionSuccessTicketCounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      voteID: number | BN | string,
      _privateKey: string,
      voteOptionSuccessTicketCounts: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    contractVoteCounts(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    contractVotes(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, string, string, string, string, string, BN, BN, boolean]>;

    myOrganizedVotes(
      arg0: string,
      arg1: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    addVote: {
      (
        _name: string,
        _organizerName: string,
        _publicKey: string,
        _options: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _organizerName: string,
        _publicKey: string,
        _options: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _organizerName: string,
        _publicKey: string,
        _options: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _organizerName: string,
        _publicKey: string,
        _options: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getMyOrganizedVotes(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

    getVoteOptionsByVoteID(
      voteID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ id: BN; name: string }[]>;

    getVoteTicketsByVoteID(
      voteID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ id: BN; encryptedBallot: string; signature: string }[]>;

    getVoteResultsByVoteID(
      voteID: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN[]>;

    caseVoteByVoteID: {
      (
        voteID: number | BN | string,
        _encryptedBallot: string,
        _signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        voteID: number | BN | string,
        _encryptedBallot: string,
        _signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        voteID: number | BN | string,
        _encryptedBallot: string,
        _signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        voteID: number | BN | string,
        _encryptedBallot: string,
        _signature: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    endVoteByVoteID: {
      (
        voteID: number | BN | string,
        _privateKey: string,
        voteOptionSuccessTicketCounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        voteID: number | BN | string,
        _privateKey: string,
        voteOptionSuccessTicketCounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        voteID: number | BN | string,
        _privateKey: string,
        voteOptionSuccessTicketCounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        voteID: number | BN | string,
        _privateKey: string,
        voteOptionSuccessTicketCounts: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
